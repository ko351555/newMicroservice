{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2019-01-21T17:56:51.202Z",
    "end": "2019-01-21T17:57:01.013Z",
    "duration": 9811,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "fc7fb38a-23b8-4325-b80a-99fbde6e57b4",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "9b94a171-7198-4687-a3aa-66af4334df3d",
        "title": "GET /users/:userId",
        "fullFile": "/Users/edkelly/Projects/core/ob-core-node-example-microservice/tests/component/user-get.spec.js",
        "file": "/tests/component/user-get.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return 400 for invalid request",
            "fullTitle": "GET /users/:userId should return 400 for invalid request",
            "timedOut": false,
            "duration": 57,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users/1').expect(400).end(error => {\n      expect(error).to.be.an('null');\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ffd26f77-f984-4c99-850e-14a506fe6e1d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the correct response if downstream system returns response",
            "fullTitle": "GET /users/:userId should return the correct response if downstream system returns response",
            "timedOut": false,
            "duration": 8042,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users/1').set('x-lbg-txn-correlation-id', '12345').set('x-lbg-brand', 'LYDS').set('x-lbg-channel', 'RC').expect(200).end((error, response) => {\n      expect(error).to.be.an('null');\n      expect(response.body).to.deep.equal(expectedResponse);\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "ad530ed9-51cb-4e22-95ab-aba9e9f6a382",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the correct response if downstream system returns error",
            "fullTitle": "GET /users/:userId should return the correct response if downstream system returns error",
            "timedOut": false,
            "duration": 469,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users/2').set('x-lbg-txn-correlation-id', '12345').set('x-lbg-brand', 'LYDS').set('x-lbg-channel', 'RC').expect(400).end((error, response) => {\n      expect(error).to.be.an('null');\n      expect(response.body).to.deep.equal(expectedError);\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "a59c2fc0-fded-43be-a3c4-a606bd17f971",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ffd26f77-f984-4c99-850e-14a506fe6e1d",
          "ad530ed9-51cb-4e22-95ab-aba9e9f6a382",
          "a59c2fc0-fded-43be-a3c4-a606bd17f971"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8568,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      },
      {
        "uuid": "f7b872b1-057e-43a5-8fcc-d8f2f3095e7e",
        "title": "GET /users",
        "fullFile": "/Users/edkelly/Projects/core/ob-core-node-example-microservice/tests/component/user-list.spec.js",
        "file": "/tests/component/user-list.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return 400 for incorrect request",
            "fullTitle": "GET /users should return 400 for incorrect request",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users').expect(400).end(error => {\n      expect(error).to.be.an('null');\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "11ef97cd-222d-4bd8-9e60-57643f7f6870",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the correct response if downstream system returns response",
            "fullTitle": "GET /users should return the correct response if downstream system returns response",
            "timedOut": false,
            "duration": 636,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users').set('x-lbg-txn-correlation-id', '12345').set('x-lbg-brand', 'LYDS').set('x-lbg-channel', 'RC').expect(200).end((error, response) => {\n      expect(error).to.be.an('null');\n      expect(response.body).to.deep.equal(expectedResponse);\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "3db910c2-65fb-443a-aa0a-ebe3481f8aeb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return the correct response if downstream system returns error",
            "fullTitle": "GET /users should return the correct response if downstream system returns error",
            "timedOut": false,
            "duration": 110,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "done => {\n    supertest(server).get('/node-example-microservice/v1.0/users').set('x-lbg-txn-correlation-id', '12345').set('x-lbg-brand', 'LYDS').set('x-lbg-channel', 'BB').expect(400).end((error, response) => {\n      expect(error).to.be.an('null');\n      expect(response.body).to.deep.equal(expectedError);\n      return done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b8ba6a27-6869-4477-b034-b049d6d41902",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "11ef97cd-222d-4bd8-9e60-57643f7f6870",
          "3db910c2-65fb-443a-aa0a-ebe3481f8aeb",
          "b8ba6a27-6869-4477-b034-b049d6d41902"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 756,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 100000
  },
  "copyrightYear": 2019
}