swagger: '2.0'
info:
  title: Open Banking Node Example Channel Service
  description: Open Banking Node Example Channel Service
  version: v1.0.0
host: localhost:3000
basePath: /node-example-microservice/v1.0
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /profiles:    
    get:
      summary: >-
        Get all the profiledirectdebit and their todos
      operationId: profile.list
      parameters:
        - $ref: '#/parameters/xLbgBrand'
        - $ref: '#/parameters/xLbgChannel'
        - $ref: '#/parameters/xLbgTxnCorrelationId'
      tags:
        - Get profileService
      responses:
        '200':
          description: Successful response contains an array of Profile
          schema:
            type: object
          headers:
            Strict-Transport-Security:
              default: max-age=0
              description: HTTPS strict transport security header
              type: string
            Cache-Control:
              default: 'max-age=0,no-cache,no-store'
              type: string
              description: Describes how long this response can be cached
            X-Frame-Options:
              default: DENY
              type: string
              description: Prevent this request from being loaded in any iframes
            X-Content-Type-Options:
              type: string
              description: >-
                Ensures each page has a content type and prevents browsers from
                doing MIME type sniffing
              default: nosniff
        '400':
          $ref: '#/responses/Error400'
        '401':
          $ref: '#/responses/Error401'
        '403':
          $ref: '#/responses/Error403'
        '415':
          $ref: '#/responses/Error415'
        '500':
          $ref: '#/responses/Error500'
        '503':
          $ref: '#/responses/Error503'
  /users:
    get:
      summary: >-
        Get all the users and their todos
      operationId: user.list
      parameters:
        - $ref: '#/parameters/xLbgBrand'
        - $ref: '#/parameters/xLbgChannel'
        - $ref: '#/parameters/xLbgTxnCorrelationId'
      tags:
        - Get users
      responses:
        '200':
          description: Successful response contains an array of users
          schema:
            $ref: '#/responses/Users'
          headers:
            Strict-Transport-Security:
              default: max-age=0
              description: HTTPS strict transport security header
              type: string
            Cache-Control:
              default: 'max-age=0,no-cache,no-store'
              type: string
              description: Describes how long this response can be cached
            X-Frame-Options:
              default: DENY
              type: string
              description: Prevent this request from being loaded in any iframes
            X-Content-Type-Options:
              type: string
              description: >-
                Ensures each page has a content type and prevents browsers from
                doing MIME type sniffing
              default: nosniff
        '400':
          $ref: '#/responses/Error400'
        '401':
          $ref: '#/responses/Error401'
        '403':
          $ref: '#/responses/Error403'
        '415':
          $ref: '#/responses/Error415'
        '500':
          $ref: '#/responses/Error500'
        '503':
          $ref: '#/responses/Error503'
  '/users/{userId}':
    get:
      summary: Get a specific user
      description: Get a specific user and their todos
      operationId: user.get
      parameters:
        - $ref: '#/parameters/userId'
        - $ref: '#/parameters/xLbgChannel'
        - $ref: '#/parameters/xLbgBrand'
        - $ref: '#/parameters/xLbgTxnCorrelationId'
      tags:
        - Get user
      responses:
        '200':
          description: Successful response contains user object
          schema:
            $ref: '#/responses/User'
          headers:
            Strict-Transport-Security:
              default: max-age=0
              description: HTTPS strict transport security header
              type: string
            Cache-Control:
              default: 'max-age=0,no-cache,no-store'
              type: string
              description: Describes how long this response can be cached
            X-Frame-Options:
              default: DENY
              type: string
              description: Prevent this request from being loaded in any iframes
            X-Content-Type-Options:
              type: string
              description: >-
                Ensures each page has a content type and prevents browsers from
                doing MIME type sniffing
              default: nosniff
        '400':
          $ref: '#/responses/Error400'
        '401':
          $ref: '#/responses/Error401'
        '403':
          $ref: '#/responses/Error403'
        '404':
          $ref: '#/responses/Error404'
        '415':
          $ref: '#/responses/Error415'
        '500':
          $ref: '#/responses/Error500'
        '503':
          $ref: '#/responses/Error503'
parameters:
  xLbgChannel:
    name: x-lbg-channel
    in: header
    description: x-lbg-channel header
    required: true
    type: string
  xLbgBrand:
    name: x-lbg-brand
    in: header
    description: x-lbg-brand header
    required: true
    type: string
  xLbgTxnCorrelationId:
    name: x-lbg-txn-correlation-id
    in: header
    description: x-lbg-txn-correlation-id header
    required: true
    type: string
  userId:
    name: userId
    in: path
    description: User ID path parameter
    type: number
    required: true
responses:
  Users:
    description: Users response
    schema:
      $ref: '#/definitions/Users'
  User:
    description: User response
    schema:
      $ref: '#/definitions/User'
  Error400:
    description: Bad request error
    schema:
      $ref: '#/definitions/Error'
  Error401:
    description: Unauthorised error
    schema:
      $ref: '#/definitions/Error'
  Error403:
    description: Forbidden error
    schema:
      $ref: '#/definitions/Error'
  Error404:
    description: Entity not found error
    schema:
      $ref: '#/definitions/Error'
  Error415:
    description: Unsupported media type error
    schema:
      $ref: '#/definitions/Error'
  Error500:
    description: An unexpected server error occured
    schema:
      $ref: '#/definitions/Error'
  Error503:
    description: Service unavailable error
    schema:
      $ref: '#/definitions/Error'
definitions:
  Users:
    type: array
    items:
      $ref: '#/definitions/User'
  User:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      username:
        type: string
      email:
        type: string
      address:
        $ref: '#/definitions/Address'
      phone:
        type: string
      website:
        type: string
      company:
        $ref: '#/definitions/Company'
      todos:
        type: array
        items:
          $ref: '#/definitions/Todo'
  Address:
    type: object
    properties:
      street:
        type: string
      suite:
        type: string
      city:
        type: string
      zipcode:
        type: string
      geo:
        $ref: '#/definitions/Geo'
  Geo:
    type: object
    properties:
      lat:
        type: string
      lng:
        type: string
  Company:
    type: object
    properties:
      name:
        type: string
      catchPhrase:
        type: string
      bs:
        type: string
  Todo:
    type: object
    properties:
      userId:
        type: number
      id:
        type: number
      title:
        type: string
      completed:
        type: boolean
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
      statusCode:
        type: number
